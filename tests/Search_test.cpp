// ********RoostGPT********
// Test generated by RoostGPT for test cpp-application using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include <gtest/gtest.h>
#include <vector>
#include <limits>
#include <assert.h>
#include <random>
#include "include/SortSearch.hpp"

class SearchTestSuite : public ::testing::Test {
protected:
  std::vector<int> vec;
  sorting_and_searching::Search search_algo;

  void SetUp() override {
    vec = {1, 3, 5, 7, 9, 11, 13, 15};
  }
};

// Test case 1: Search for an existing number in the vector
TEST_F(SearchTestSuite, FindExistingNumber) {
  int result = search_algo.binary_search(vec, 5);
  ASSERT_EQ(result, 2); // 5 is at index 2
}

// Test case 2: Search for a number not existing in the vector
TEST_F(SearchTestSuite, FindNonExistingNumber) {
  int result = search_algo.binary_search(vec, 4);
  ASSERT_EQ(result, -1); // 4 is not in the vector, expect -1
}

// Test case 3: Search with empty vector
TEST_F(SearchTestSuite, SearchInEmptyVector) {
  std::vector<int> empty_vec;
  int result = search_algo.binary_search(empty_vec, 1);
  ASSERT_EQ(result, -1); // Searching in an empty vector, expect -1
}

// Test case 4: Search with vector having maximum integer
TEST_F(SearchTestSuite, SearchMaxIntEdgeCase) {
  vec.push_back(std::numeric_limits<int>::max());
  int result = search_algo.binary_search(vec, std::numeric_limits<int>::max());
  ASSERT_EQ(result, vec.size() - 1); // Max int is the last element
}

// Test case 5: Search for the minimum number in the vector
TEST_F(SearchTestSuite, FindMinimumNumber) {
  int result = search_algo.binary_search(vec, vec.front());
  ASSERT_EQ(result, 0); // Minimum is at index 0
}

// Test case 6: Search for the maximum number in the vector
TEST_F(SearchTestSuite, FindMaximumNumber) {
  int result = search_algo.binary_search(vec, vec.back());
  ASSERT_EQ(result, vec.size() - 1); // Maximum is at the last index
}

// Main function to run all tests
int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

