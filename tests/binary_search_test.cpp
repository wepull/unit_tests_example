// ********RoostGPT********
// Test generated by RoostGPT for test cpp using AI Type Claude AI and AI Model claude-3-opus-20240229



// ********RoostGPT********
#include <gtest/gtest.h>
#include <vector>
#include <limits>
#include "SortSearch.hpp"

using sorting_and_searching::Search;

// Test suite for binary_search function
class BinarySearchTest : public ::testing::Test {
protected:
    Search search;
};

// Test case: Search for an existing element in the vector
TEST_F(BinarySearchTest, ExistingElement) {
    std::vector<int> vec{1, 3, 5, 7, 9};
    int X = 5;
    int expected = 2;
    int result = search.binary_search(vec, X);
    EXPECT_EQ(result, expected);
}

// Test case: Search for a non-existing element in the vector
TEST_F(BinarySearchTest, NonExistingElement) {
    std::vector<int> vec{1, 3, 5, 7, 9};
    int X = 4;
    int expected = -1;
    int result = search.binary_search(vec, X);
    EXPECT_EQ(result, expected);
}

// Test case: Search in an empty vector
TEST_F(BinarySearchTest, EmptyVector) {
    std::vector<int> vec;
    int X = 5;
    EXPECT_THROW(search.binary_search(vec, X), std::runtime_error);
}

// Test case: Search for the minimum element in the vector
TEST_F(BinarySearchTest, MinimumElement) {
    std::vector<int> vec{1, 3, 5, 7, 9};
    int X = 1;
    int expected = 0;
    int result = search.binary_search(vec, X);
    EXPECT_EQ(result, expected);
}

// Test case: Search for the maximum element in the vector
TEST_F(BinarySearchTest, MaximumElement) {
    std::vector<int> vec{1, 3, 5, 7, 9};
    int X = 9;
    int expected = 4;
    int result = search.binary_search(vec, X);
    EXPECT_EQ(result, expected);
}

// Test case: Search for a value greater than the maximum element in the vector
TEST_F(BinarySearchTest, ValueGreaterThanMax) {
    std::vector<int> vec{1, 3, 5, 7, 9};
    int X = std::numeric_limits<int>::max();
    EXPECT_THROW(search.binary_search(vec, X), std::runtime_error);
}

int main(int argc, char** argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
