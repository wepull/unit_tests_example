// ********RoostGPT********
// Test generated by RoostGPT for test cpp-application using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include <gtest/gtest.h>
#include <limits>
#include <random>
#include <assert.h>
#include "include/SortSearch.hpp"

class ObtainTest : public ::testing::Test {
protected:
  sorting_and_searching::Obtain obtain;

  virtual void SetUp() {
  }

  virtual void TearDown() {
  }
};

TEST_F(ObtainTest, GetVectorReturnsCorrectSize) {
  size_t vector_size = 10;
  size_t range = 50;
  std::vector<int> result = obtain.getVector(vector_size, range);
  ASSERT_EQ(vector_size, result.size());
}

TEST_F(ObtainTest, GetVectorValuesWithinRange) {
  size_t vector_size = 10;
  size_t range = 50;
  std::vector<int> result = obtain.getVector(vector_size, range);
  for (int num : result) {
    EXPECT_GE(num, -static_cast<int>(range));
    EXPECT_LE(num, static_cast<int>(range));
  }
}

TEST_F(ObtainTest, GetVectorEmptyIfZeroSize) {
  size_t vector_size = 0;
  size_t range = 50;
  EXPECT_THROW({
    obtain.getVector(vector_size, range);
  }, std::runtime_error);
}

TEST_F(ObtainTest, GetVectorThrowsIfZeroRange) {
  size_t vector_size = 10;
  size_t range = 0;
  EXPECT_THROW({
    obtain.getVector(vector_size, range);
  }, std::runtime_error);
}

TEST_F(ObtainTest, GetVectorThrowsIfSizeTooLarge) {
  size_t vector_size = std::numeric_limits<int>::max();
  size_t range = 50;
  EXPECT_THROW({
    obtain.getVector(vector_size, range);
  }, std::runtime_error);
}

TEST_F(ObtainTest, GetVectorThrowsIfRangeTooLarge) {
  size_t vector_size = 10;
  size_t range = std::numeric_limits<int>::max();
  EXPECT_THROW({
    obtain.getVector(vector_size, range);
  }, std::runtime_error);
}

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

