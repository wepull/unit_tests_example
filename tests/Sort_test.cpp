// ********RoostGPT********
// Test generated by RoostGPT for test cpp-application using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include <gtest/gtest.h>
#include <vector>
#include <assert.h>
#include <limits>
#include <random>
#include "SortSearch.hpp"

using sorting_and_searching::Obtain;
using sorting_and_searching::Sort;
using sorting_and_searching::Search;

class SortTest : public ::testing::Test {
protected:
  void SetUp() override {
    // Can initialize objects here if needed for multiple tests, otherwise individual tests can initialize their own.
  }

  void TearDown() override {
    // Code here will be called immediately after each test, right before the destructor.
  }

  Sort sorter;
};

// A test case to check sorting of a vector with unique elements.
TEST_F(SortTest, UniqueElements) {
  std::vector<int> vec = {4, 2, 3, 1, 5};
  std::vector<int> sorted_vec = {1, 2, 3, 4, 5};

  sorter.sortVector(vec);
  ASSERT_EQ(vec, sorted_vec);
}

// A test case to check sorting of a vector with duplicate elements.
TEST_F(SortTest, DuplicateElements) {
  std::vector<int> vec = {4, 2, 2, 3, 1, 3, 5};
  std::vector<int> sorted_vec = {1, 2, 2, 3, 3, 4, 5};

  sorter.sortVector(vec);
  ASSERT_EQ(vec, sorted_vec);
}

// A test case to check sorting of an already sorted vector.
TEST_F(SortTest, AlreadySorted) {
  std::vector<int> vec = {1, 2, 3, 4, 5};

  sorter.sortVector(vec);
  EXPECT_EQ(vec, (std::vector<int>{1, 2, 3, 4, 5}));
}

// A test case to check sorting of a vector with single element.
TEST_F(SortTest, SingleElement) {
  std::vector<int> vec = {1};

  sorter.sortVector(vec);
  EXPECT_EQ(vec, (std::vector<int>{1}));
}

// A test case to check sorting of a vector with all elements being the same.
TEST_F(SortTest, AllSameElements) {
  std::vector<int> vec = {2, 2, 2, 2, 2};

  sorter.sortVector(vec);
  EXPECT_EQ(vec, (std::vector<int>{2, 2, 2, 2, 2}));
}

// A test case to verify that the sort function handles a large vector.
TEST_F(SortTest, LargeVector) {
  std::vector<int> vec(1000);
  std::iota(vec.begin(), vec.end(), -500); // Fill with a range of values from -500.
  std::shuffle(vec.begin(), vec.end(), std::mt19937(std::random_device()())); // Shuffle the vector.
  std::vector<int> expected_vec(vec);
  std::sort(expected_vec.begin(), expected_vec.end());

  sorter.sortVector(vec);
  ASSERT_EQ(vec, expected_vec);
}

// Entry point for the GoogleTest framework.
int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  // Parse command line for GoogleTest flags, and remove all recognized flags.
  return RUN_ALL_TESTS();
}

