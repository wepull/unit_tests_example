// ********RoostGPT********
// Test generated by RoostGPT for test cpp using AI Type Claude AI and AI Model claude-3-opus-20240229



// ********RoostGPT********
#include <gtest/gtest.h>
#include <vector>
#include <random>
#include <limits>
#include "SortSearch.hpp"

using namespace sorting_and_searching;

// Positive test cases
TEST(GetVectorTest, ReturnsVectorWithSpecifiedSize) {
  Obtain obj;
  std::size_t vector_size = 5;
  std::size_t range = 10;
  std::vector<int> result = obj.getVector(vector_size, range);
  EXPECT_EQ(result.size(), vector_size);
}

TEST(GetVectorTest, ReturnsVectorWithElementsWithinRange) {
  Obtain obj;
  std::size_t vector_size = 10;
  std::size_t range = 20;
  std::vector<int> result = obj.getVector(vector_size, range);
  for (int element : result) {
    EXPECT_GE(element, -static_cast<int>(range));
    EXPECT_LE(element, static_cast<int>(range));
  }
}

// Negative test cases
TEST(GetVectorTest, ThrowsAssertionErrorForZeroVectorSize) {
  Obtain obj;
  std::size_t vector_size = 0;
  std::size_t range = 10;
  EXPECT_DEATH(obj.getVector(vector_size, range), "");
}

TEST(GetVectorTest, ThrowsAssertionErrorForZeroRange) {
  Obtain obj;
  std::size_t vector_size = 5;
  std::size_t range = 0;
  EXPECT_DEATH(obj.getVector(vector_size, range), "");
}

// Edge case test
TEST(GetVectorTest, HandlesMaximumVectorSizeAndRange) {
  Obtain obj;
  std::size_t vector_size = std::numeric_limits<int>::max() - 1;
  std::size_t range = std::numeric_limits<int>::max() - 1;
  std::vector<int> result = obj.getVector(vector_size, range);
  EXPECT_EQ(result.size(), vector_size);
}

int main(int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
