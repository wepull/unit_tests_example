// ********RoostGPT********
// Test generated by RoostGPT for test cpp using AI Type Claude AI and AI Model claude-3-opus-20240229



// ********RoostGPT********
#include <gtest/gtest.h>
#include <iostream>
#include <vector>
#include "SortSearch.hpp"

// Test fixture for the main function
class MainTest : public ::testing::Test {
protected:
    sorting_and_searching::Obtain obtainer;
    sorting_and_searching::Sort sorter;
    sorting_and_searching::Search searcher;
};

// Test case for successful sorting and searching
TEST_F(MainTest, SuccessfulSortAndSearch) {
    const std::size_t v_size = 50u;
    const std::size_t range = 100u;
    std::vector<int> v = obtainer.getVector(v_size, range);
    int search_value = v[v_size / 2];

    sorter.sortVector(v);
    int pos = searcher.binary_search(v, search_value);

    EXPECT_GE(pos, 0);
    EXPECT_LT(pos, v_size);
    EXPECT_EQ(v[pos], search_value);
}

// Test case for unsuccessful search
TEST_F(MainTest, UnsuccessfulSearch) {
    const std::size_t v_size = 50u;
    const std::size_t range = 100u;
    std::vector<int> v = obtainer.getVector(v_size, range);
    int search_value = range + 1;

    sorter.sortVector(v);
    int pos = searcher.binary_search(v, search_value);

    EXPECT_EQ(pos, -1);
}

// Test case for sorting an empty vector
TEST_F(MainTest, SortEmptyVector) {
    std::vector<int> v;
    sorter.sortVector(v);
    EXPECT_TRUE(v.empty());
}

// Test case for searching in an empty vector
TEST_F(MainTest, SearchEmptyVector) {
    std::vector<int> v;
    int search_value = 10;
    int pos = searcher.binary_search(v, search_value);
    EXPECT_EQ(pos, -1);
}

// Test case for searching a value greater than the maximum value in the vector
TEST_F(MainTest, SearchValueGreaterThanMax) {
    const std::size_t v_size = 50u;
    const std::size_t range = 100u;
    std::vector<int> v = obtainer.getVector(v_size, range);
    int search_value = range + 1;

    sorter.sortVector(v);
    int pos = searcher.binary_search(v, search_value);

    EXPECT_EQ(pos, -1);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
