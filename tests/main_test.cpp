// ********RoostGPT********
// Test generated by RoostGPT for test cpp-application using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include <gtest/gtest.h>
#include <iostream>
#include <vector>
#include "SortSearch.hpp"

using sorting_and_searching::Obtain;
using sorting_and_searching::Sort;
using sorting_and_searching::Search;

TEST(SortSearchTestSuite, GetVectorTest_PositiveSizeAndRange) {
  Obtain obtainer;
  auto vec = obtainer.getVector(50, 100);
  EXPECT_EQ(vec.size(), 50u);
  for (auto val : vec)
    EXPECT_GE(val, -100);
  for (auto val : vec)
    EXPECT_LE(val, 100);
}

TEST(SortSearchTestSuite, GetVectorTest_ZeroSize) {
  Obtain obtainer;
  EXPECT_THROW(obtainer.getVector(0, 100), std::runtime_error);
}

TEST(SortSearchTestSuite, SortVectorTest_Ordering) {
  Sort sorter;
  std::vector<int> v = {3, 1, 4, 1, 5, 9};
  sorter.sortVector(v);
  for (std::size_t i = 0u; i < v.size() - 1; ++i)
    EXPECT_LE(v[i], v[i + 1]);
}

TEST(SortSearchTestSuite, SortVectorTest_Empty) {
  Sort sorter;
  std::vector<int> v = {};
  sorter.sortVector(v);
  EXPECT_TRUE(v.empty());
}

TEST(SortSearchTestSuite, BinarySearchTest_Found) {
  Sort sorter;
  Search searcher;
  std::vector<int> v = {3, 1, 4, 1, 5, 9};
  sorter.sortVector(v);
  EXPECT_NE(searcher.binary_search(v, 4), -1);
}

TEST(SortSearchTestSuite, BinarySearchTest_NotFound) {
  Sort sorter;
  Search searcher;
  std::vector<int> v = {3, 1, 4, 1, 5, 9};
  sorter.sortVector(v);
  EXPECT_EQ(searcher.binary_search(v, 2), -1);
}

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

