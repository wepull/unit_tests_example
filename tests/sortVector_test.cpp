// ********RoostGPT********
// Test generated by RoostGPT for test cpp using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include <gtest/gtest.h>
#include <assert.h>
#include <limits>
#include <random>
#include "include/SortSearch.hpp"

// Test suite for sortVector function
class SortVectorTest : public ::testing::Test {
protected:
    // Helper function to check if vector is sorted
    bool isSorted(const std::vector<int>& v) {
        if (v.size() == 0) {
            return true;
        }
        for (size_t i = 0; i < v.size() - 1; ++i) {
            if (v[i] > v[i + 1]) {
                return false;
            }
        }
        return true;
    }
};

// Test case for empty vector
TEST_F(SortVectorTest, EmptyVector) {
    std::vector<int> v;
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Test case for single element vector
TEST_F(SortVectorTest, SingleElementVector) {
    std::vector<int> v = {42};
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Test case for already sorted vector
TEST_F(SortVectorTest, AlreadySortedVector) {
    std::vector<int> v = {1, 2, 3, 4, 5};
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Test case for reverse sorted vector
TEST_F(SortVectorTest, ReverseSortedVector) {
    std::vector<int> v = {5, 4, 3, 2, 1};
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Test case for vector with duplicates
TEST_F(SortVectorTest, VectorWithDuplicates) {
    std::vector<int> v = {2, 3, 2, 1, 3};
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Test case for vector with negative values
TEST_F(SortVectorTest, VectorWithNegativeValues) {
    std::vector<int> v = {-1, -3, -2, -5, -4};
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Test case for vector with large numbers
TEST_F(SortVectorTest, VectorWithLargeNumbers) {
    std::vector<int> v = {std::numeric_limits<int>::max(), 0, std::numeric_limits<int>::min()};
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Test case with random values
TEST_F(SortVectorTest, VectorWithRandomValues) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(std::numeric_limits<int>::min(), std::numeric_limits<int>::max());

    std::vector<int> v;
    for (int i = 0; i < 100; ++i) {
        v.push_back(dis(gen));
    }
    
    sortVector(v);
    ASSERT_TRUE(isSorted(v));
}

// Main function to run all tests
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

