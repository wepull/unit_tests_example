// ********RoostGPT********
// Test generated by RoostGPT for test cpp using AI Type Claude AI and AI Model claude-3-opus-20240229



// ********RoostGPT********
#include <gtest/gtest.h>
#include <vector>
#include "SortSearch.hpp"

using namespace sorting_and_searching;

class SortVectorTest : public ::testing::Test {
protected:
    Sort sort;
};

TEST_F(SortVectorTest, SortsEmptyVector) {
    std::vector<int> v;
    sort.sortVector(v);
    EXPECT_TRUE(v.empty());
}

TEST_F(SortVectorTest, SortsSingleElementVector) {
    std::vector<int> v{42};
    sort.sortVector(v);
    EXPECT_EQ(v.size(), 1u);
    EXPECT_EQ(v[0], 42);
}

TEST_F(SortVectorTest, SortsAlreadySortedVector) {
    std::vector<int> v{1, 2, 3, 4, 5};
    sort.sortVector(v);
    EXPECT_EQ(v, (std::vector<int>{1, 2, 3, 4, 5}));
}

TEST_F(SortVectorTest, SortsReverseSortedVector) {
    std::vector<int> v{5, 4, 3, 2, 1};
    sort.sortVector(v);
    EXPECT_EQ(v, (std::vector<int>{1, 2, 3, 4, 5}));
}

TEST_F(SortVectorTest, SortsVectorWithDuplicates) {
    std::vector<int> v{5, 2, 4, 2, 1};
    sort.sortVector(v);
    EXPECT_EQ(v, (std::vector<int>{1, 2, 2, 4, 5}));
}

TEST_F(SortVectorTest, SortsLargeRandomVector) {
    std::vector<int> v;
    for (int i = 0; i < 1000; ++i) {
        v.push_back(rand());
    }
    std::vector<int> sorted_v = v;
    std::sort(sorted_v.begin(), sorted_v.end());
    sort.sortVector(v);
    EXPECT_EQ(v, sorted_v);
}

TEST_F(SortVectorTest, SortsVectorWithMaxInt) {
    std::vector<int> v{5, 2, std::numeric_limits<int>::max(), 4, 2, 1};
    sort.sortVector(v);
    EXPECT_EQ(v, (std::vector<int>{1, 2, 2, 4, 5, std::numeric_limits<int>::max()}));
}

TEST_F(SortVectorTest, SortsVectorWithMinInt) {
    std::vector<int> v{5, 2, std::numeric_limits<int>::min(), 4, 2, 1};
    sort.sortVector(v);
    EXPECT_EQ(v, (std::vector<int>{std::numeric_limits<int>::min(), 1, 2, 2, 4, 5}));
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
