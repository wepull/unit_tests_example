// ********RoostGPT********
// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include "gtest/gtest.h"
#include "SortSearch.hpp"

using namespace sorting_and_searching;

// Test suite for testing sorting and searching components
class SortSearchTest : public ::testing::Test {
protected:
    Obtain obtainer;
    Sort sorter;
    Search searcher;
};

// Test cases for Obtain class
TEST_F(SortSearchTest, GetVectorCorrectSize) {
    size_t expected_size = 100;
    auto result_vector = obtainer.getVector(expected_size, 50);
    ASSERT_EQ(result_vector.size(), expected_size);
}

TEST_F(SortSearchTest, GetVectorValuesInRange) {
    size_t vector_size = 100;
    size_t range = 50;
    auto result_vector = obtainer.getVector(vector_size, range);
    for (const auto& value : result_vector) {
        EXPECT_GE(value, -static_cast<int>(range));
        EXPECT_LE(value, static_cast<int>(range));
    }
}

// Test cases for Sort class
TEST_F(SortSearchTest, SortVectorIsSorted) {
    size_t vector_size = 100;
    size_t range = 50;
    auto test_vector = obtainer.getVector(vector_size, range);
    sorter.sortVector(test_vector);
    for (size_t i = 0; i < test_vector.size() - 1; ++i) {
        EXPECT_LE(test_vector[i], test_vector[i+1]);
    }
}

// Test cases for Search class
TEST_F(SortSearchTest, BinarySearchFound) {
    std::vector<int> test_vector = {1, 3, 5, 7, 9};
    auto search_result = searcher.binary_search(test_vector, 7);
    ASSERT_NE(search_result, -1);
    ASSERT_EQ(test_vector[search_result], 7);
}

TEST_F(SortSearchTest, BinarySearchNotFound) {
    std::vector<int> test_vector = {1, 3, 5, 7, 9};
    auto search_result = searcher.binary_search(test_vector, 8);
    ASSERT_EQ(search_result, -1);
}

// Main function
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

