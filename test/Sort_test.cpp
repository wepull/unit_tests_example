// ********RoostGPT********
// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include <gtest/gtest.h>
#include <vector>
#include <algorithm>
#include <random>
#include <limits>
#include <assert.h>
#include "SortSearch.hpp" // Ensure this path is correct for your project structure

// Test suite for Sort::sortVector
class SortVectorTest : public ::testing::Test {
protected:
  Sort sorter; // Sort class instance to be used across tests

  // Utility function to check if the vector is sorted in increasing order
  bool isSorted(const std::vector<int>& vec) {
    return std::is_sorted(vec.begin(), vec.end());
  }
};

TEST_F(SortVectorTest, SortsRandomVector) {
  std::vector<int> vec(10);
  std::random_device rd;
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> distrib(std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
  std::generate(vec.begin(), vec.end(), [&] { return distrib(gen); });
  
  sorter.sortVector(vec);
  EXPECT_TRUE(isSorted(vec));
}

TEST_F(SortVectorTest, SortsAlreadySortedVector) {
  std::vector<int> vec{1, 2, 3, 4, 5};
  sorter.sortVector(vec);
  EXPECT_TRUE(isSorted(vec));
}

TEST_F(SortVectorTest, SortsVectorWithIdenticalElements) {
  std::vector<int> vec(10, 42); // Vector with 10 identical elements
  sorter.sortVector(vec);
  EXPECT_TRUE(isSorted(vec));
}

TEST_F(SortVectorTest, SortsSingleElementVector) {
  std::vector<int> vec{42};
  sorter.sortVector(vec);
  EXPECT_TRUE(isSorted(vec));
}

TEST_F(SortVectorTest, AssertsOnEmptyVector) {
  std::vector<int> vec;
  EXPECT_DEATH(sorter.sortVector(vec), "");
}

// Main function
int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

