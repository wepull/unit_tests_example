// ********RoostGPT********
// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
#include <gtest/gtest.h>
#include <iostream>
#include <vector>
#include "SortSearch.hpp"

namespace {

class SortSearchTestSuite : public ::testing::Test {
 protected:
  sorting_and_searching::Obtain obtainer;
  sorting_and_searching::Sort sorter;
  sorting_and_searching::Search searcher;

  // We will define some constants for testing.
  static const std::size_t TEST_VECTOR_SIZE = 10;  // Size for vector generation
  static const std::size_t TEST_RANGE = 50;        // Range for random values
};

// Test case to ensure that a vector can be obtained successfully
TEST_F(SortSearchTestSuite, GetVectorSuccess) {
  std::vector<int> test_vec = obtainer.getVector(TEST_VECTOR_SIZE, TEST_RANGE);
  ASSERT_EQ(test_vec.size(), TEST_VECTOR_SIZE) << "Vector size is not as expected";
  for (auto val : test_vec) {
    EXPECT_LE(val, static_cast<int>(TEST_RANGE)) << "Value is greater than range";
    EXPECT_GE(val, -static_cast<int>(TEST_RANGE)) << "Value is less than negative range";
  }
}

// Test case to verify if the vector is sorted correctly
TEST_F(SortSearchTestSuite, SortVectorSuccess) {
  std::vector<int> test_vec = obtainer.getVector(TEST_VECTOR_SIZE, TEST_RANGE);
  sorter.sortVector(test_vec);
  for (std::size_t i = 1; i < test_vec.size(); ++i) {
    EXPECT_LE(test_vec[i - 1], test_vec[i]) << "Vector is not sorted in non-decreasing order";
  }
}

// Test case to verify binary search function works correctly for a known value
TEST_F(SortSearchTestSuite, BinarySearchKnownValueSuccess) {
  std::vector<int> test_vec = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
  int known_value = 11;
  int expected_pos = 5;  // Known position of the value 11 in the sorted vector
  int found_pos = searcher.binary_search(test_vec, known_value);
  ASSERT_EQ(expected_pos, found_pos) << "Known value's position not found correctly";
}

// Test case to verify binary search function fails correctly for an unknown value
TEST_F(SortSearchTestSuite, BinarySearchUnknownValueFail) {
  std::vector<int> test_vec = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
  int unknown_value = 20;  // Value not present in the vector
  int expected_pos = -1;   // Expected position for a not-found value
  int found_pos = searcher.binary_search(test_vec, unknown_value);
  ASSERT_EQ(expected_pos, found_pos) << "Unknown value should not be found";
}

}  // namespace

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

